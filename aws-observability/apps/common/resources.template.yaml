AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: "Template to Setup Sumo Logic Sources and supporting AWS Resources for CloudTrail, ALB, Lambda CloudWatch Logs and CloudWatch Metrics."

Parameters:
  SumoLogicDeployment:
    Type: String
    AllowedValues:
      - nite
      - stag
      - long
    Description: "Enter au, ca, de, eu, jp, us2, in, fed or us1."
  SumoLogicAccessID:
    Type: String
    Description: "Sumo Logic Access ID. Used for Sumo Logic API calls."
    AllowedPattern: ".+"
    ConstraintDescription: "Sumo Logic Access ID can not be empty."
  SumoLogicAccessKey:
    Type: String
    Description: "Sumo Logic Access Key. Used for Sumo Logic API calls."
    AllowedPattern: ".+"
    ConstraintDescription: "Sumo Logic Access Key can not be empty."
    NoEcho: true
  SumoLogicOrganizationId:
    Description: "Appears on the Account Overview page that displays information about your Sumo Logic organization. Used for IAM Role in Sumo Logic AWS Sources."
    Type: String
    AllowedPattern: ".+"
    ConstraintDescription: "Sumo Logic Organization Id can not be empty."
  RemoveSumoLogicResourcesOnDeleteStack:
    AllowedValues:
      - true
      - false
    Default: true
    Description: "To delete collectors, sources and apps when the stack is deleted, set this parameter to True. Default is True.
                  Deletes the resources created by the stack. Deletion of updated resources will be skipped."
    Type: String

  AccountAlias:
    Type: String
    Description: "Provide an Alias for AWS account for identification in Sumo Logic Explorer View, metrics and logs. Please do not include special characters."
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: "Alias must only contain uppercase, lowercase letters, number and length less than or equal to 30 characters."
    MaxLength: 30

  CollectorName:
    Type: String
    Description: "Provide a Collector Name"
    Default: ""

  CreateMetaDataSource:
    Type: String
    Description: "Yes - Creates Sumo Logic MetaData Source. A common metadata source will be created with the region selected.
                  No - If you already have a MetaData Source configured."
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  MetaDataSourceName:
    Type: String
    Description: "Change the MetaData Source name to be created else default name will be used."
    Default: ""

  CreateCloudWatchMetricsSource:
    Type: String
    Description: "Yes - Creates a Sumo Logic CloudWatch Metrics Source which collects Metrics for multiple Namespaces from the region selected.
                  No - If you already have a CloudWatch Metrics Source collecting ALB metrics."
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  CloudWatchMetricsSourceName:
    Type: String
    Description: "Provide a Cloud Watch Metrics Source Name"
    Default: ""
  CloudWatchMetricsNameSpaces:
    Default: ""
    Description: "Provide Comma delimited list of the namespaces to collect."
    Type: CommaDelimitedList
  ScanInterval:
    Default: 300000
    Description: "Provide the scan interval to fetch metrics into Sumo Logic."
    Type: String

  CreateALBLogSource:
    Type: String
    Description: "Choose Yes to create Sumo Logic ALB Log Source with provided bucket Name."
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  CreateALBS3Bucket:
    Type: String
    Description: "Yes - Create a new S3 bucket in AWS S3.
                  No - Use an existing S3 bucket from AWS S3 which has ALB Logs."
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  ALBS3LogsBucketName:
    Type: String
    Description: "Required when Bucket creation Flag = No. Provide an existing bucket name that has ALB logs."
    Default: ""
  ALBS3BucketPathExpression:
    Type: String
    Description: Path expression to match one or more S3 objects. For example, ABC*.log or ABC.log
    Default: "*"
  ALBLogsSourceName:
    Type: String
    Description: "Provide a ALB Logs Source Name"
    Default: ""

  CreateCloudTrailLogSource:
    Type: String
    Description: "Choose Yes to create Sumo Logic Cloud Trail Log Source with provided bucket Name."
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  CreateCloudTrailBucket:
    Type: String
    Description: "Yes - Create a new CloudTrail bucket in AWS S3.
                  No - Use an existing CloudTrail bucket from AWS S3 which has CloudTrail Logs."
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  CloudTrailLogsBucketName:
    Type: String
    Description: "Required when Bucket creation Flag = No. Provide an Existing bucket name that has CloudTrail logs."
    Default: ""
  CloudTrailBucketPathExpression:
    Type: String
    Description: Path expression to match one or more S3 objects. For example, ABC*.log or ABC.log
    Default: "*"
  CloudTrailLogsSourceName:
    Type: String
    Description: "Provide a CloudTrail Source Name"
    Default: ""

  CreateCloudWatchLogSource:
    Type: String
    Description: "Choose Yes to create Sumo Logic Cloud Watch Log Source."
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  CloudWatchLogsSourceName:
    Type: String
    Description: "Provide a CloudWatch Logs Source Name"
    Default: ""

Conditions:
  # Sources Conditions
  install_metadata_source: !Equals [!Ref CreateMetaDataSource, 'Yes']
  install_cloud_watch_metric_source: !Equals [!Ref CreateCloudWatchMetricsSource, 'Yes']
  install_alb_logs_source: !Equals [!Ref CreateALBLogSource, 'Yes']
  install_cloudtrail_logs_source: !Equals [!Ref CreateCloudTrailLogSource, 'Yes']
  install_cloudwatch_logs_source: !Equals [!Ref CreateCloudWatchLogSource, 'Yes']

  install_collector: !Or
    - !Condition install_metadata_source
    - !Condition install_cloud_watch_metric_source
    - !Condition install_alb_logs_source
    - !Condition install_cloudtrail_logs_source
    - !Condition install_cloudwatch_logs_source

  # Bucket Condition and Trail
  create_alb_bucket: !Equals [!Ref CreateALBS3Bucket, 'Yes']
  create_cloudtrail_bucket: !Equals [!Ref CreateCloudTrailBucket, 'Yes']
  create_target_s3_bucket: !Or
    - !Condition create_alb_bucket
    - !Condition create_cloudtrail_bucket

  # SNS
  create_cloudtrail_sns_topic: !And
    - !Not [!Condition create_cloudtrail_bucket]
    - !Condition install_cloudtrail_logs_source
  create_alb_sns_topic: !And
    - !Not [!Condition create_alb_bucket]
    - !Condition install_alb_logs_source

  # Sumo Logic Role
  install_sumo_logic_role: !Or
    - !Condition install_metadata_source
    - !Condition install_cloud_watch_metric_source
    - !Condition install_alb_logs_source
    - !Condition install_cloudtrail_logs_source

Mappings:
  # Bucket names where the Lambda Zip and Nested Templates are kept. Buckets are present in region, with region as suffix.
  # Some buckets names have 's' in the region suffix. It is kept intentional as bucket names were not available.
  # Buckets names which are intentional -
  # 1. appdevzipfiles-eu-north-1s
  # 2. appdevzipfiles-ap-east-1s
  # 3. appdevzipfiles-af-south-1s
  # 4. appdevzipfiles-me-south-1s
  RegionMap:
    us-east-1:
      bucketname: appdevzipfiles-us-east-1
    us-east-2:
      bucketname: appdevzipfiles-us-east-2
    us-west-1:
      bucketname: appdevzipfiles-us-west-1
    us-west-2:
      bucketname: appdevzipfiles-us-west-2
    ap-south-1:
      bucketname: appdevzipfiles-ap-south-1
    ap-northeast-2:
      bucketname: appdevzipfiles-ap-northeast-2
    ap-southeast-1:
      bucketname: appdevzipfiles-ap-southeast-1
    ap-southeast-2:
      bucketname: appdevzipfiles-ap-southeast-2
    ap-northeast-1:
      bucketname: appdevzipfiles-ap-northeast-1
    ca-central-1:
      bucketname: appdevzipfiles-ca-central-1
    eu-central-1:
      bucketname: appdevzipfiles-eu-central-1
    eu-west-1:
      bucketname: appdevzipfiles-eu-west-1
    eu-west-2:
      bucketname: appdevzipfiles-eu-west-2
    eu-west-3:
      bucketname: appdevzipfiles-eu-west-3
    eu-north-1:
      bucketname: appdevzipfiles-eu-north-1s
    sa-east-1:
      bucketname: appdevzipfiles-sa-east-1
    ap-east-1:
      bucketname: appdevzipfiles-ap-east-1s
    af-south-1:
      bucketname: appdevzipfiles-af-south-1s
    eu-south-1:
      bucketname: appdevzipfiles-eu-south-1
    me-south-1:
      bucketname: appdevzipfiles-me-south-1s

  Region2ELBAccountId:
    us-east-1:
      AccountId: "127311923021"
    us-east-2:
      AccountId: "033677994240"
    us-west-1:
      AccountId: "027434742980"
    us-west-2:
      AccountId: "797873946194"
    af-south-1:
      AccountId: "098369216593"
    ca-central-1:
      AccountId: "985666609251"
    eu-central-1:
      AccountId: "054676820928"
    eu-west-1:
      AccountId: "156460612806"
    eu-west-2:
      AccountId: "652711504416"
    eu-south-1:
      AccountId: "635631232127"
    eu-west-3:
      AccountId: "009996457667"
    eu-north-1:
      AccountId: "897822967062"
    ap-east-1:
      AccountId: "754344448648"
    ap-northeast-1:
      AccountId: "582318560864"
    ap-northeast-2:
      AccountId: "600734575887"
    ap-northeast-3:
      AccountId: "383597477331"
    ap-southeast-1:
      AccountId: "114774131450"
    ap-southeast-2:
      AccountId: "783225319266"
    ap-south-1:
      AccountId: "718504428378"
    me-south-1:
      AccountId: "076674570225"
    sa-east-1:
      AccountId: "507241528517"
    us-gov-west-1:
      AccountId: "048591011584"
    us-gov-east-1:
      AccountId: "190560391635"
    cn-north-1:
      AccountId: "638102146993"
    cn-northwest-1:
      AccountId: "037604701340"

Resources:
  WaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AwsObservabilityLambdaExecutePolicies
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                Resource: '*'

  LambdaHelper:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: main.handler
      Runtime: python3.7
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref 'AWS::Region', bucketname]
        Key: "sumologic-aws-observability/apps/SumoLogicAWSObservabilityHelper/SumoLogicAWSObservabilityHelperv2.0.6.zip"
      MemorySize: 128
      Timeout: 900
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn

  EnterpriseCheck:
    Type: Custom::EnterpriseOrTrialAccountCheck
    Properties:
      ServiceToken: !GetAtt LambdaHelper.Arn
      Region: !Ref "AWS::Region"
      SumoAccessID: !Ref SumoLogicAccessID
      SumoAccessKey: !Ref SumoLogicAccessKey
      SumoDeployment: !Ref SumoLogicDeployment

  ############# START - RESOURCES FOR COMMON BUCKET #################

  CommonBucketSNSTopic:
    Type: 'AWS::SNS::Topic'
    Condition: create_target_s3_bucket
    Properties:
      TopicName: !Join
        - ""
        - - !Sub "sumo-sns-topic-${AccountAlias}-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]

  CommonS3Bucket:
    Condition: create_target_s3_bucket
    Type: AWS::S3::Bucket
    DependsOn: CommonSNSpolicy
    Properties:
      BucketName: !Join
        - ""
        - - "aws-observability-logs-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:Put
            Topic: !Ref CommonBucketSNSTopic

  CommonBucketPolicy:
    Condition: create_target_s3_bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CommonS3Bucket
      PolicyDocument:
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource:
              - !Sub "arn:aws:s3:::${CommonS3Bucket}"
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${CommonS3Bucket}/*"
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: AWSBucketExistenceCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:ListBucket
            Resource:
              - !Sub "arn:aws:s3:::${CommonS3Bucket}"
          - Sid: AWSAlbLogsPutObjects
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !FindInMap [Region2ELBAccountId, !Ref 'AWS::Region', AccountId]
                  - ":root"
            Action: s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${CommonS3Bucket}/*"
          - Sid: AWSAlbLogDeliveryAclCheck
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:GetBucketAcl
            Resource:
              - !Sub "arn:aws:s3:::${CommonS3Bucket}"
          - Sid: AWSAlbLogDeliveryWrite
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${CommonS3Bucket}/*"
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  CommonSNSpolicy:
    Condition: create_target_s3_bucket
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: SumoTopicPolicy
        Statement:
          - Action:
              - sns:Publish
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Join
                  - ""
                  - - "arn:aws:s3:::aws-observability-logs-"
                    - !Select
                      - 0
                      - !Split
                        - "-"
                        - !Select
                          - 2
                          - !Split ["/", !Ref "AWS::StackId"]
            Effect: Allow
            Principal:
              "Service": "s3.amazonaws.com"
            Resource:
              - !Ref CommonBucketSNSTopic
      Topics:
        - Ref: CommonBucketSNSTopic

  CommonCloudTrail:
    Type: AWS::CloudTrail::Trail
    Condition: create_cloudtrail_bucket
    DependsOn: CommonBucketPolicy
    Properties:
      IsLogging: true
      IsMultiRegionTrail: false
      S3BucketName: !Ref CommonS3Bucket
      TrailName: !Sub "Aws-Observability-${AccountAlias}"

  ############# START - RESOURCES FOR COLLECTOR #################
  CreateSumoLogicAWSExplorerView:
    Type: Custom::SumoLogicAWSExplorer
    Properties:
      ServiceToken: !GetAtt LambdaHelper.Arn
      RemoveOnDeleteStack: false
      ExplorerName: "AWS Observability"
      MetadataKeys:
        - "account"
        - "region"
        - "namespace"
        - "entity"
      SumoAccessID: !Ref SumoLogicAccessID
      SumoAccessKey: !Ref SumoLogicAccessKey
      SumoDeployment: !Ref SumoLogicDeployment

  SumoLogicSourceRole:
    Type: AWS::IAM::Role
    Condition: install_sumo_logic_role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::246946804217:root
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Sub "${SumoLogicDeployment}:${SumoLogicOrganizationId}"
      Path: "/"
      Policies:
        - PolicyName: SumoLogicAwsSourcesPolicies
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucketVersions
                  - s3:ListBucket
                  - tag:GetResources
                  - cloudwatch:ListMetrics
                  - cloudwatch:GetMetricStatistics
                Resource:
                  "*"

  SumoLogicHostedCollector:
    Type: Custom::Collector
    Condition: install_collector
    Properties:
      ServiceToken: !GetAtt LambdaHelper.Arn
      Region: !Ref "AWS::Region"
      CollectorType: Hosted
      RemoveOnDeleteStack: !Ref RemoveSumoLogicResourcesOnDeleteStack
      CollectorName: !Ref CollectorName
      SumoAccessID: !Ref SumoLogicAccessID
      SumoAccessKey: !Ref SumoLogicAccessKey
      SumoDeployment: !Ref SumoLogicDeployment

  ############# START - RESOURCES FOR METADATA SOURCE #################

  SumoLogicMetaDataSource:
    Condition: install_metadata_source
    Type: Custom::AWSSource
    Properties:
      ServiceToken: !GetAtt LambdaHelper.Arn
      Region: !Ref "AWS::Region"
      RemoveOnDeleteStack: !Ref RemoveSumoLogicResourcesOnDeleteStack
      SourceType: AwsMetadata
      SourceName: !Ref MetaDataSourceName
      SourceCategory: "aws/observability/ec2/metadata"
      CollectorId: !GetAtt SumoLogicHostedCollector.COLLECTOR_ID
      SumoAccessID: !Ref SumoLogicAccessID
      SumoAccessKey: !Ref SumoLogicAccessKey
      SumoDeployment: !Ref SumoLogicDeployment
      RoleArn: !GetAtt SumoLogicSourceRole.Arn

  ############# START - RESOURCES FOR CLOUD WATCH METRICS SOURCE #################

  SumoLogicCloudwatchMetricsSourceWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: CreateSumoLogicAWSExplorerView
    Properties:
      Handle: !Ref WaitHandle
      Timeout: "3"
      Count: 0

  SumoLogicCloudwatchMetricsSource:
    Type: Custom::AWSSource
    Condition: install_cloud_watch_metric_source
    DependsOn: SumoLogicCloudwatchMetricsSourceWaitCondition
    Properties:
      ServiceToken: !GetAtt LambdaHelper.Arn
      Region: !Ref "AWS::Region"
      RemoveOnDeleteStack: !Ref RemoveSumoLogicResourcesOnDeleteStack
      SourceType: AwsCloudWatch
      Namespaces: !Ref CloudWatchMetricsNameSpaces
      SourceName: !Ref CloudWatchMetricsSourceName
      ScanInterval: !Ref ScanInterval
      SourceCategory: "aws/observability/cloudwatch/metrics"
      CollectorId: !GetAtt SumoLogicHostedCollector.COLLECTOR_ID
      SumoAccessID: !Ref SumoLogicAccessID
      SumoAccessKey: !Ref SumoLogicAccessKey
      SumoDeployment: !Ref SumoLogicDeployment
      RoleArn: !GetAtt SumoLogicSourceRole.Arn
      Fields:
        account: !Ref AccountAlias

  ############# START - RESOURCES FOR ALB SOURCE #################
  ALBSourceWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: SumoLogicCloudwatchMetricsSourceWaitCondition
    Properties:
      Handle: !Ref WaitHandle
      Timeout: "5"
      Count: 0

  ALBSource:
    Condition: install_alb_logs_source
    Type: Custom::AWSSource
    DependsOn: ALBSourceWaitCondition
    Properties:
      SourceType: AwsElbBucket
      ServiceToken: !GetAtt LambdaHelper.Arn
      Region: !Ref "AWS::Region"
      SourceName: !Ref ALBLogsSourceName
      RemoveOnDeleteStack: !Ref RemoveSumoLogicResourcesOnDeleteStack
      SourceCategory: "aws/observability/alb/logs"
      CollectorId: !GetAtt SumoLogicHostedCollector.COLLECTOR_ID
      SumoAccessID: !Ref SumoLogicAccessID
      SumoAccessKey: !Ref SumoLogicAccessKey
      SumoDeployment: !Ref SumoLogicDeployment
      TargetBucketName: !If [create_alb_bucket, !Ref CommonS3Bucket, !Ref ALBS3LogsBucketName]
      PathExpression: !Ref ALBS3BucketPathExpression
      Fields:
        account: !Ref AccountAlias
        namespace: "aws/applicationelb"
        region: !Ref "AWS::Region"
      RoleArn: !GetAtt SumoLogicSourceRole.Arn

  ALBSNSTopic:
    Type: 'AWS::SNS::Topic'
    Condition: create_alb_sns_topic
    Properties:
      TopicName: !Join
        - ""
        - - !Sub "alb-sumo-sns-${AccountAlias}-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]

  ALBSNSSubscription:
    Condition: install_alb_logs_source
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn: !If [create_alb_bucket, !Ref CommonBucketSNSTopic, !Ref ALBSNSTopic]
      Endpoint: !GetAtt ALBSource.SUMO_ENDPOINT
      Protocol: https
      DeliveryPolicy:
        healthyRetryPolicy:
          numRetries: 40
          minDelayTarget: 10
          maxDelayTarget: 300
          numMinDelayRetries: 3
          numMaxDelayRetries: 5
          numNoDelayRetries: 0
          backoffFunction: exponential

  ALBSNSpolicy:
    Condition: create_alb_sns_topic
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: ALBSNSpolicy
        Statement:
          - Action:
              - sns:Publish
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${ALBS3LogsBucketName}"
            Effect: Allow
            Principal:
              "Service": "s3.amazonaws.com"
            Resource:
              - !Ref ALBSNSTopic
      Topics:
        - Ref: ALBSNSTopic

  ############# START - RESOURCES FOR CLOUD TRAIL SOURCE #################
  CloudTrailSourceWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: ALBSourceWaitCondition
    Properties:
      Handle: !Ref WaitHandle
      Timeout: "7"
      Count: 0

  CloudTrailSource:
    Condition: install_cloudtrail_logs_source
    Type: Custom::AWSSource
    DependsOn: CloudTrailSourceWaitCondition
    Properties:
      SourceType: AwsCloudTrailBucket
      ServiceToken: !GetAtt LambdaHelper.Arn
      Region: !Ref "AWS::Region"
      SourceName: !Ref CloudTrailLogsSourceName
      TargetBucketName: !If [create_cloudtrail_bucket, !Ref CommonS3Bucket, !Ref CloudTrailLogsBucketName]
      RemoveOnDeleteStack: !Ref RemoveSumoLogicResourcesOnDeleteStack
      SourceCategory: "aws/observability/cloudtrail/logs"
      CollectorId: !GetAtt SumoLogicHostedCollector.COLLECTOR_ID
      SumoAccessID: !Ref SumoLogicAccessID
      SumoAccessKey: !Ref SumoLogicAccessKey
      SumoDeployment: !Ref SumoLogicDeployment
      PathExpression: !Ref CloudTrailBucketPathExpression
      Fields:
        account: !Ref AccountAlias
      RoleArn: !GetAtt SumoLogicSourceRole.Arn

  CloudTrailSNSTopic:
    Type: 'AWS::SNS::Topic'
    Condition: create_cloudtrail_sns_topic
    Properties:
      TopicName: !Join
        - ""
        - - !Sub "cloudtrail-sumo-sns-${AccountAlias}-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]

  CloudTrailSNSSubscription:
    Condition: install_cloudtrail_logs_source
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn: !If [create_cloudtrail_bucket, !Ref CommonBucketSNSTopic, !Ref CloudTrailSNSTopic]
      Endpoint: !GetAtt CloudTrailSource.SUMO_ENDPOINT
      Protocol: https
      DeliveryPolicy:
        healthyRetryPolicy:
          numRetries: 40
          minDelayTarget: 10
          maxDelayTarget: 300
          numMinDelayRetries: 3
          numMaxDelayRetries: 5
          numNoDelayRetries: 0
          backoffFunction: exponential

  CloudTrailSNSpolicy:
    Condition: create_cloudtrail_sns_topic
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: CloudTrailSNSpolicy
        Statement:
          - Action:
              - sns:Publish
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${CloudTrailLogsBucketName}"
            Effect: Allow
            Principal:
              "Service": "s3.amazonaws.com"
            Resource:
              - !Ref CloudTrailSNSTopic
      Topics:
        - Ref: CloudTrailSNSTopic

  ############# START - RESOURCES FOR CLOUD WATCH LOGS SOURCE #################
  CloudWatchHTTPSourceWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: CloudTrailSourceWaitCondition
    Properties:
      Handle: !Ref WaitHandle
      Timeout: "9"
      Count: 0

  CloudWatchEventFunction:
    Type: AWS::CloudFormation::Stack
    Condition: install_cloudwatch_logs_source
    Properties:
      TemplateURL: "https://s3.amazonaws.com/appdev-cloudformation-templates/DLQLambdaCloudFormation.json"
      Parameters:
        SumoEndPointURL: !GetAtt CloudWatchHTTPSource.SUMO_ENDPOINT
        IncludeLogGroupInfo: true

  CloudWatchHTTPSource:
    Condition: install_cloudwatch_logs_source
    Type: Custom::HTTPSource
    DependsOn: CloudWatchHTTPSourceWaitCondition
    Properties:
      ServiceToken: !GetAtt LambdaHelper.Arn
      Region: !Ref "AWS::Region"
      SourceName: !Ref CloudWatchLogsSourceName
      RemoveOnDeleteStack: !Ref RemoveSumoLogicResourcesOnDeleteStack
      SourceCategory: "aws/observability/cloudwatch/logs"
      CollectorId: !GetAtt SumoLogicHostedCollector.COLLECTOR_ID
      SumoAccessID: !Ref SumoLogicAccessID
      SumoAccessKey: !Ref SumoLogicAccessKey
      SumoDeployment: !Ref SumoLogicDeployment
      Fields:
        account: !Ref AccountAlias
        namespace: "aws/lambda"
        region: !Ref "AWS::Region"

Outputs:
  LambdaHelperARN:
    Description: "Sumo Logic Lambda Helper ARN"
    Value: !GetAtt LambdaHelper.Arn
  LambdaRoleARN:
    Description: "Sumo Logic Lambda Helper Role ARN"
    Value: !GetAtt LambdaRole.Arn
  BucketName:
    Description: "BucketName"
    Condition: create_target_s3_bucket
    Value: !Ref CommonS3Bucket
  CloudWatchLambdaARN:
    Description: "Cloud Watch Lambda ARN"
    Condition: install_cloudwatch_logs_source
    Value: !GetAtt CloudWatchEventFunction.Outputs.SumoCWLogsLambdaArn
  EnterpriseCheck:
    Description: "Check If Account is Enterprise or Not"
    Value: !GetAtt EnterpriseCheck.is_enterprise